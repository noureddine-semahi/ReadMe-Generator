const { execSync, spawnSync } = require('child_process')
const os = require('os')
const path = require('path')
const download = require('./download')
const generator = require('./generator')

module.exports.downloadAndGenerate = async function (context) {
  const { name } = context
  const tmpPath = path.join(os.tmpdir(), 'npm-package-template')
  await download('fourcels/npm-package-template', tmpPath)
  const src = path.join(tmpPath, 'template')
  const dest = path.resolve(name)
  generator(context, src, dest)
  return dest
}

module.exports.initPackage = function (dest) {
  process.chdir(dest)
  this.installDependencies()
  this.initGit()
}

module.exports.installDependencies = function () {
  if (this.hasYarn()) {
    spawnSync('yarn', { stdio: 'inherit' })
  } else {
    spawnSync('npm', ['install'], { stdio: 'inherit' })
  }
}

module.exports.initGit = function () {
  if (this.hasGit()) {
    execSync('git init', { stdio: 'inherit' })
    execSync('git add .', { stdio: 'inherit' })
    execSync('git commit -qm init', { stdio: 'inherit' })
  }
}

let _hasYarn
module.exports.hasYarn = function () {
  if (_hasYarn !== undefined) {
    return _hasYarn
  }
  try {
    execSync('yarn --version', { stdio: 'ignore' })
    return (_hasYarn = true)
  } catch (e) {
    return (_hasYarn = false)
  }
}

let _hasGit
module.exports.hasGit = () => {
  if (_hasGit !== undefined) {
    return _hasGit
  }
  try {
    execSync('git --version', { stdio: 'ignore' })
    return (_hasGit = true)
  } catch (e) {
    return (_hasGit = false)
  }
}
